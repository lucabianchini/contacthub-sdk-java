organization := "com.contactlab.hub"
licenses := Seq("Apache License 2.0" -> url("http://www.apache.org/licenses/LICENSE-2.0"))
homepage := Some(url("https://contactlab.com"))
sonatypeProfileName := "com.contactlab"

scmInfo := Some(
  ScmInfo(
    url("https://github.com/contactlab/contacthub-sdk-java"),
    "scm:git@github.com:contactlab/contacthub-sdk-java.git"))

developers := List(
  Developer(
    id    = "dhinus",
    name  = "Francesco Negri",
    email = "francesconegri@gmail.com",
    url   = url("http://github.com/dhinus")))

publishTo := {
  val nexus = "https://oss.sonatype.org/"
  if (isSnapshot.value)
    Some("snapshots" at nexus + "content/repositories/snapshots")
  else
    Some("releases"  at nexus + "service/local/staging/deploy/maven2")
}

name := "sdk-java"
description := "ContactHUB Java SDK"
autoScalaLibrary := false
scalaVersion := scalaV
libraryDependencies ++= testDependencies ++ dependencies
publishMavenStyle := true
crossPaths := false
val javaVersion = "1.8"
javacOptions in doc ++= Seq(
  "-sourcepath", "target/classes", "-subpackages", "it.contactlab",
  "-source", javaVersion, "-target", javaVersion, "-Xlint")

enablePlugins(GitVersioning)
enablePlugins(GitBranchPrompt)

initialize := {
  val _ = initialize.value
  if (sys.props("java.specification.version") != javaVersion)
    sys.error("Java " + javaVersion + " is required for this project while " + sys.props("java.specification.version") + " found.")
}

// Always run the "compile" task before the "doc" task, because some of the
// sources are autogenerated by Immutables at compile time.
doc in Compile := {
  (compile in Compile).value
  (doc in Compile).value
}

// Run checkstyle when compiling
// jcheckStyleConfig := "checkstyle-config.xml"
// compile in Compile := {
//   (jcheckStyle in Compile).value
//   (compile in Compile).value
// }

lazy val scalaV = "2.12.1"

lazy val testDependencies = Seq(
  "org.scalatest" %% "scalatest" % "3.0.0",
  "org.scala-lang" % "scala-library" % scalaV,
  "org.scala-lang.modules" % "scala-java8-compat_2.11" % "0.8.0-RC7",
  "org.scalacheck" %% "scalacheck" % "1.13.4"
).map(_ % "test")

lazy val dependencies = Seq(
  "org.immutables" % "value" % "2.3.7",
  "com.mashape.unirest" % "unirest-java" % "1.4.9",
  "com.google.code.gson" % "gson" % "2.8.4",
  "com.google.code.findbugs" % "jsr305" % "3.0.0"
)

lazy val root = project.in(file("."))

lazy val example = project.in(file("example")).dependsOn(root)
